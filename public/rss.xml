<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[JFXJ Codes]]></title><description><![CDATA[JFXJ Codes]]></description><link>https://joelfooxj.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 11 May 2021 22:39:00 GMT</lastBuildDate><item><title><![CDATA[EC2 monitoring with iOS notifications]]></title><description><![CDATA[I had setup a couple of EC2 instances to execute OQ engine runs. Unfortunately, I could not automate the setup and teardown of each run…]]></description><link>https://joelfooxj.github.io/ec2-ios-notifications/</link><guid isPermaLink="false">https://joelfooxj.github.io/ec2-ios-notifications/</guid><pubDate>Tue, 11 May 2021 20:35:56 GMT</pubDate><content:encoded>&lt;p&gt;I had setup a couple of EC2 instances to execute OQ engine runs. Unfortunately, I could not automate the setup and teardown of each run since each run had its own specific post-processing of data that needed to be done. One gigantic worry I had was that I’d complete all my work on the instance and then just forget to stop it, incurring unnused hours of runtime on a (potentially) expensive instance. For example, if I had forgotten to turn off a x1.32xlarge instanceand just let it run overnight, it would’ve cost 8hrs * $USD 13 = $USD 104! A very expensive mistake. &lt;/p&gt;
&lt;p&gt;I wanted a simple reminder pushed to my phone (being high in the order of things that catch and redirect my attention) about whether I had any EC2 instances currently running when they’re not supposed to and be promptly shut down. To do this, I set a cron job that called a script every half hour to my AWS account and checked for running EC2 instances. If there were, a notification is sent to my iPhone.  &lt;/p&gt;
&lt;p&gt;The following steps assume that you already have an AWS account with EC2 instances running, as well as adequare knowledge of setupin your local python environment.&lt;/p&gt;
&lt;h2&gt;Preparing your environment&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download and install the AWS CLI: &lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html&quot;&gt;Installing, updating, and uninstalling the AWS CLI version 2&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Install Python 3.6 or later, and then install the Boto3 library: &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html&quot;&gt;Installing the Boto3 library&lt;/a&gt;. This library is an official AWS SDK to interact with AWS services via python. &lt;/li&gt;
&lt;li&gt;[Install the requests library for python] (&lt;a href=&quot;https://docs.python-requests.org/en/master/user/install/&quot;&gt;https://docs.python-requests.org/en/master/user/install/&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pushcut.io/&quot;&gt;Install PushCut into your iOS device&lt;/a&gt;. We will use this to call webhooks that send push notifications to the iOS device that you’ve installed it on. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Monitoring script&lt;/h2&gt;
&lt;p&gt;This is the python script that I’ve used:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; boto3 
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; requests &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; rq

ec2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; boto3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ec2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
instances &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ec2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;instances&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    Filters&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;instance-state-name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Values&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;running&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;instances&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
	&lt;span class=&quot;token comment&quot;&gt;# there are instances running &lt;/span&gt;
	rq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://api.pushcut.io/&amp;lt;your secret token goes here&gt;/notifications/&amp;lt;your custom notification name goes here&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script simply enumerates through the ec2 resources and checks if there are any that are currently running. If there are any running instances, it sends a GET request to the PushCut url as defined in your app. See the &lt;a href=&quot;https://www.pushcut.io/help#web_api&quot;&gt;Webhook&lt;/a&gt; section in the PushCut help section to get started on defining custom webhooks. &lt;/p&gt;
&lt;p&gt;Save this script somewhere and remember the path to it. &lt;/p&gt;
&lt;h2&gt;Setting up the cron job/task scheduler&lt;/h2&gt;
&lt;p&gt;For Linux/MacOS, type the following command into your terminal to set up a cron job: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0,30&lt;/span&gt; * * * * &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;path to your python program here&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;path to your script here&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;.py &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This calls the script every 0th and 30th minute of every hour.&lt;/p&gt;
&lt;p&gt;For Windows, follow the instructions &lt;a href=&quot;https://www.windowscentral.com/how-create-automated-task-using-task-scheduler-windows-10&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;That’s it!  &lt;/p&gt;</content:encoded></item></channel></rss>