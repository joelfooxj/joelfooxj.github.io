<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Joel's Brain Repo]]></title><description><![CDATA[A central repository of ramblings about code and other things.]]></description><link>https://joelfooxj.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 16 May 2021 17:32:13 GMT</lastBuildDate><item><title><![CDATA[EC2-Ubuntu -  xrdp or TeamViewer]]></title><description><![CDATA[Comparing xrdp and TeamViewer on EC2 Ubuntu instances]]></description><link>https://joelfooxj.github.io//posts/ec2-xrdp-teamviewer</link><guid isPermaLink="false">https://joelfooxj.github.io//posts/ec2-xrdp-teamviewer</guid><pubDate>Sat, 15 May 2021 19:11:04 GMT</pubDate><content:encoded>&lt;h1 id=&quot;motivation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#motivation&quot; aria-label=&quot;motivation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Motivation&lt;/h1&gt;
&lt;p&gt;I wanted to setup an easy GUI way for my colleagues to access our EC2 Ubuntu instances and run openquake compute jobs without having to go through the hassle of learning about ssh, rsync, scp and all the other simple bash commands I take for granted. That necessitated some sort of remote desktop solution, and I considered xrdp and Teamviewer. &lt;/p&gt;
&lt;h1 id=&quot;which-one-is-better&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#which-one-is-better&quot; aria-label=&quot;which one is better permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Which one is better?&lt;/h1&gt;
&lt;p&gt;For usage in small teams such as mine, it would have to be Teamviewer, hands down. Teamviewer had lower latency, better video quality, and way better file transfer speeds. That last point was especially important, since we generated large datasets which we needed to transfer back to your local PCs for extensive post-processing. &lt;/p&gt;
&lt;p&gt;Considering an c5.24xlarge instance and a gigabit fibre connection (1Gbps down/ 1Gbps up) on my end, I was getting at most 1MB/s. With Teamviewer, I was able to get close to rsync speeds, at about 5-10 MB/s. Also, obviously, the remote ID doesn’t change every time you stop and start an instance, which makes things a lot easier when explaining the setup to your non-IT minded teammates. &lt;/p&gt;
&lt;h1 id=&quot;teamviewer-installation-and-initialization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#teamviewer-installation-and-initialization&quot; aria-label=&quot;teamviewer installation and initialization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Teamviewer installation and initialization&lt;/h1&gt;
&lt;p&gt;Of course, the flipside is that Teamviewer is a little more tedious to setup, especially since an EC2 instance is headless. After some intense googling, I found &lt;a href=&quot;https://thilinamad.medium.com/remote-desktop-to-ubuntu-instance-with-no-gui-f98566adb53e&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this guide by Thilina Madumal&lt;/a&gt; that was just what was required. If some of the steps below don’t make sense, read through the guide! &lt;/p&gt;
&lt;p&gt;I opted to install vanilla lxde instead as my default desktop environment because it was lightweight. Since I had to do this for several instances, I wrote a script that installs and configures (almost) everything starting from a fresh instance. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create the xorg.conf file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ssh into your instance and then navigate to your home directory with &lt;code class=&quot;language-text&quot;&gt;cd ~&lt;/code&gt; and create a file called &lt;code class=&quot;language-text&quot;&gt;xorg.conf&lt;/code&gt; with the following contents: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# This xorg configuration file is meant to be used&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# to start a dummy X11 server.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# For details, please see:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# https://www.xpra.org/xorg.conf&lt;/span&gt;
 
&lt;span class=&quot;token comment&quot;&gt;# Here we setup a Virtual Display of 1600x900 pixels&lt;/span&gt;
 
Section &lt;span class=&quot;token string&quot;&gt;&quot;Device&quot;&lt;/span&gt;
		Identifier  &lt;span class=&quot;token string&quot;&gt;&quot;Configured Video Device&quot;&lt;/span&gt;
		Driver      &lt;span class=&quot;token string&quot;&gt;&quot;dummy&quot;&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;#VideoRam 4096000&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;#VideoRam 256000&lt;/span&gt;
		VideoRam    &lt;span class=&quot;token number&quot;&gt;16384&lt;/span&gt;
EndSection
 
Section &lt;span class=&quot;token string&quot;&gt;&quot;Monitor&quot;&lt;/span&gt;
		Identifier  &lt;span class=&quot;token string&quot;&gt;&quot;Configured Monitor&quot;&lt;/span&gt;
		HorizSync   &lt;span class=&quot;token number&quot;&gt;5.0&lt;/span&gt; - &lt;span class=&quot;token number&quot;&gt;1000.0&lt;/span&gt;
		VertRefresh &lt;span class=&quot;token number&quot;&gt;5.0&lt;/span&gt; - &lt;span class=&quot;token number&quot;&gt;200.0&lt;/span&gt;
		Modeline &lt;span class=&quot;token string&quot;&gt;&quot;1600x900&quot;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;33.92&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1600&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1632&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1760&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1792&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;900&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;921&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;924&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;946&lt;/span&gt;
EndSection
 
Section &lt;span class=&quot;token string&quot;&gt;&quot;Screen&quot;&lt;/span&gt;
		Identifier  &lt;span class=&quot;token string&quot;&gt;&quot;Default Screen&quot;&lt;/span&gt;
		Monitor     &lt;span class=&quot;token string&quot;&gt;&quot;Configured Monitor&quot;&lt;/span&gt;
		Device      &lt;span class=&quot;token string&quot;&gt;&quot;Configured Video Device&quot;&lt;/span&gt;
		DefaultDepth &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;
		SubSection &lt;span class=&quot;token string&quot;&gt;&quot;Display&quot;&lt;/span&gt;
				 Viewport &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
				 Depth &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;
				 Virtual &lt;span class=&quot;token number&quot;&gt;1920&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1080&lt;/span&gt;
		EndSubSection
EndSection&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the resolution numbers for the “Display” SubSection. You can change this to whichever suites your needs. I chose standard HD. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create the install script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the same directory, create a file called &lt;code class=&quot;language-text&quot;&gt;setup.sh&lt;/code&gt; with the following contents: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update -y
&lt;span class=&quot;token function&quot;&gt;yes&lt;/span&gt; Y &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; lxde
&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://download.teamviewer.com/download/linux/teamviewer_amd64.deb
&lt;span class=&quot;token function&quot;&gt;yes&lt;/span&gt; Y &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; ./teamviewer_amd64.deb
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; teamviewer &lt;span class=&quot;token function&quot;&gt;passwd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;your password here&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; teamviewer daemon &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; teamviewer license accept
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update -y
&lt;span class=&quot;token function&quot;&gt;yes&lt;/span&gt; Y &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; xserver-xorg-video-dummy
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; xorg.conf /etc/X11/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace &amp;#x3C;your password here&gt; with the remote access password of your choice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set your instance password&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The user password for the instance has to be set with &lt;code class=&quot;language-text&quot;&gt;sudo passwd ubuntu&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Check your teamviewer ID and reboot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Type &lt;code class=&quot;language-text&quot;&gt;teamviewer info&lt;/code&gt; to see the teamviewer ID for this instance then reboot with &lt;code class=&quot;language-text&quot;&gt;sudo reboot&lt;/code&gt;.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the instance has rebooted, you should be able to connect to the instance via Teamviewer. On the login screen, enter the password you set for &lt;code class=&quot;language-text&quot;&gt;ubuntu&lt;/code&gt;.Once I was in, I disabled the login screen since access control is already performed with the Teamviewer remote access password, and I didn’t want my team to have to remember 2 passwords anyway. &lt;/p&gt;
&lt;p&gt;To see how I setup an EC2 monitoring script that sent notifications to my iPhone, click &lt;a href=&quot;/posts/ec2-ios-monitoring&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[EC2 monitoring with iOS notifications]]></title><description><![CDATA[Perform simple AWS EC2 monitoring with notifications to iOS devices]]></description><link>https://joelfooxj.github.io//posts/ec2-ios-monitoring</link><guid isPermaLink="false">https://joelfooxj.github.io//posts/ec2-ios-monitoring</guid><pubDate>Tue, 11 May 2021 20:35:56 GMT</pubDate><content:encoded>&lt;p&gt;I had setup a couple of EC2 instances to execute OQ engine runs. Unfortunately, I could not automate the setup and teardown of each run since each run had its own specific post-processing of data that needed to be done. One gigantic worry I had was that I’d complete all my work on the instance and then just forget to stop it, incurring unnused hours of runtime on a (potentially) expensive instance. For example, if I had forgotten to turn off a x1.32xlarge instance and just let it run overnight, it would’ve cost 8hrs * $USD 13 = $USD 104! A very expensive mistake. &lt;/p&gt;
&lt;p&gt;I wanted a simple reminder pushed to my phone (being high in the order of things that catch and redirect my attention) about whether I had any EC2 instances currently running when they’re not supposed to and be promptly shut down. To do this, I set a cron job that called a script every half hour to my AWS account and checked for running EC2 instances. If there were, a notification is sent to my iPhone.  &lt;/p&gt;
&lt;p&gt;The following steps assume that you already have an AWS account with EC2 instances running, as well as adequare knowledge of setupin your local python environment.&lt;/p&gt;
&lt;h2 id=&quot;preparing-your-environment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#preparing-your-environment&quot; aria-label=&quot;preparing your environment permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preparing your environment&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download and install the AWS CLI: &lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Installing, updating, and uninstalling the AWS CLI version 2&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Install Python 3.6 or later, and then install the Boto3 library: &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Installing the Boto3 library&lt;/a&gt;. This library is an official AWS SDK to interact with AWS services via python. &lt;/li&gt;
&lt;li&gt;[Install the requests library for python] (&lt;a href=&quot;https://docs.python-requests.org/en/master/user/install/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.python-requests.org/en/master/user/install/&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pushcut.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Install PushCut into your iOS device&lt;/a&gt;. We will use this to call webhooks that send push notifications to the iOS device that you’ve installed it on. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;monitoring-script&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#monitoring-script&quot; aria-label=&quot;monitoring script permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Monitoring script&lt;/h2&gt;
&lt;p&gt;This is the python script that I’ve used:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; boto3 
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; requests &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; rq

ec2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; boto3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resource&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ec2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
instances &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ec2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;instances&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    Filters&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;instance-state-name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Values&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;running&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;instances&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
	&lt;span class=&quot;token comment&quot;&gt;# there are instances running &lt;/span&gt;
	rq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://api.pushcut.io/&amp;lt;your secret token goes here&gt;/notifications/&amp;lt;your custom notification name goes here&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script simply enumerates through the ec2 resources and checks if there are any that are currently running. If there are any running instances, it sends a GET request to the PushCut url as defined in your app. See the &lt;a href=&quot;https://www.pushcut.io/help#web_api&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Webhook&lt;/a&gt; section in the PushCut help section to get started on defining custom webhooks. &lt;/p&gt;
&lt;p&gt;Save this script somewhere and remember the path to it. &lt;/p&gt;
&lt;h2 id=&quot;setting-up-the-cron-jobtask-scheduler&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#setting-up-the-cron-jobtask-scheduler&quot; aria-label=&quot;setting up the cron jobtask scheduler permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setting up the cron job/task scheduler&lt;/h2&gt;
&lt;p&gt;For Linux/MacOS, type the following command into your terminal to set up a cron job: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0,30&lt;/span&gt; * * * * &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;path to your python program here&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;path to your script here&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;.py &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This calls the script every 0th and 30th minute of every hour.&lt;/p&gt;
&lt;p&gt;For Windows, follow the instructions &lt;a href=&quot;https://www.windowscentral.com/how-create-automated-task-using-task-scheduler-windows-10&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;</content:encoded></item></channel></rss>