{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react-filter-data-tree","result":{"data":{"markdownRemark":{"id":"8e2663a6-bc47-5274-967c-8d9abf2acb4d","html":"<h1 id=\"motivation\" style=\"position:relative;\"><a href=\"#motivation\" aria-label=\"motivation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motivation</h1>\n<p>I had to modify a complex object across deeply nested React components, and I wanted to do it with the useReduce and useContext hooks as it seemed cleaner and more maintainable than having to learn and write the boilerplate code for Redux. </p>\n<h1 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description</h1>\n<p>Essentially, I had to read and update a large JSON object which had in it many deep layers with arrays mixed in. I wrote a nested React form that could represent and update this. This included changing the size of some arrays within the the object, as well as updating objects nested <em>within</em> those arrays. </p>\n<h1 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h1>\n<p>Passing the state of the object (and any updates that occur to the object being propogated down to all children components) was fairly trivial, by using the createContext/useContext hook. You can find a guide to using that here: -link to context hooks here-.</p>\n<p>Updating the object is done through a reducer function, which is where the majority of the complexity arises.  </p>","fields":{"slug":"/posts/react-filter-data-tree","tagSlugs":["/tag/react/","/tag/filter/","/tag/tree/"]},"frontmatter":{"date":"2021-06-06T23:04:15.125Z","description":"While working on a data visualization component in my React dashboard (ie. charts), I had to build a form that extracted the correct dataset from a large JSON object. I built a component that treats the object as a large n-ary tree and filters down the branches until returning the correct leaf (dataset)","tags":["react","filter","tree"],"title":"Using forms to filter data using React","socialImage":null}}},"pageContext":{"slug":"/posts/react-filter-data-tree"}},"staticQueryHashes":["251939775","401334301","825871152"]}